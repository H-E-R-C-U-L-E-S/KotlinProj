import kotlin.math.pow
import kotlin.math.roundToInt
import kotlin.math.sqrt

/*
рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃЎрЃџрЃљрЃАрЃў Point рЃарЃЮрЃЏрЃћрЃџрЃАрЃљрЃф рЃћрЃЦрЃюрЃћрЃЉрЃљ 2 рЃЋрЃћрЃџрЃў, рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃљрЃЊ x рЃЊрЃљ y рЃЎрЃЮрЃЮрЃарЃЊрЃўрЃюрЃљрЃбрЃўрЃА рЃерЃћрЃАрЃљрЃюрЃљрЃ«рЃљрЃЊ ­ЪњЙ
(рЃАрЃљрЃгрЃДрЃўрЃАрЃў рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃћрЃЉрЃў рЃњрЃљрЃЊрЃЏрЃЮрЃљрЃгрЃЮрЃЊрЃћрЃЌ рЃЎрЃЮрЃюрЃАрЃбрЃарЃБрЃЦрЃбрЃЮрЃарЃерЃў).
рЃЎрЃџрЃљрЃАрЃА рЃБрЃюрЃЊрЃљ рЃ░рЃЦрЃЮрЃюрЃЊрЃћрЃА рЃерЃћрЃЏрЃЊрЃћрЃњрЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃЮрЃюрЃљрЃџрЃў: ­ЪДЉ­ЪЈ╝РђЇ­Ъњ╗
toString рЃЏрЃћрЃЌрЃЮрЃЊрЃў - рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃБрЃюрЃЊрЃљ рЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃЊрЃћрЃА рЃЎрЃџрЃљрЃАрЃўрЃА рЃЋрЃћрЃџрЃћрЃЉрЃА String рЃцрЃЮрЃарЃЏрЃљрЃбрЃерЃў ­ЪЉѕ
equals рЃЏрЃћрЃЌрЃЮрЃЊрЃў - рЃБрЃюрЃЊрЃљ рЃўрЃФрЃџрЃћрЃЮрЃЊрЃћрЃА рЃАрЃљрЃерЃБрЃљрЃџрЃћрЃЉрЃљрЃА рЃерЃћрЃЋрЃљрЃЊрЃљрЃарЃЮрЃЌ 2 point рЃЎрЃџрЃљрЃАрЃўрЃА рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў ­ЪцЌ
рЃЏрЃћрЃЌрЃЮрЃЊрЃў, рЃарЃЮрЃЏрЃћрЃџрЃћрЃЉрЃўрЃф рЃАрЃљрЃЌрЃљрЃЋрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ рЃАрЃўрЃЏрЃћрЃбрЃарЃўрЃБрЃџрЃљрЃЊ рЃњрЃљрЃЊрЃљрЃўрЃбрЃљрЃюрЃА рЃгрЃћрЃарЃбрЃўрЃџрЃА  ­ЪЉї­ЪЈ╗
рЃЏрЃћрЃЌрЃЮрЃЊрЃў, рЃарЃЮрЃЏрЃћрЃџрЃАрЃљрЃф рЃЕрЃљрЃћрЃгрЃЮрЃЊрЃћрЃЉрЃљ рЃАрЃ«рЃЋрЃљ Point рЃЎрЃџрЃљрЃАрЃўрЃА рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў рЃЊрЃљ рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃЏрЃљрЃюрЃФрЃўрЃџрЃА рЃљрЃЏ рЃЮрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃА рЃерЃЮрЃарЃўрЃА ­ЪЌ║№ИЈ (optional)
 */

fun main(args: Array<String>) {

    //рЃгрЃћрЃарЃбрЃўрЃџрЃћрЃЉрЃА рЃАрЃљрЃгрЃДрЃўрЃА рЃЎрЃЮрЃЮрЃарЃЊрЃўрЃюрЃљрЃбрЃћрЃЉрЃА рЃњрЃљрЃЊрЃљрЃЋрЃфрЃћрЃЏрЃЌ рЃЎрЃЮрЃюрЃАрЃбрЃарЃБрЃЦрЃбрЃЮрЃарЃерЃў
    var point1 = Point(5.1,-3.23);
    var point2 = Point(2.2,1.32);
    var point3 = Point(2.2,1.32);

    //рЃгрЃћрЃарЃбрЃўрЃџрЃћрЃЉрЃўрЃА рЃАрЃљрЃгрЃДрЃўрЃАрЃў рЃЎрЃЮрЃЮрЃарЃЊрЃўрЃюрЃљрЃбрЃћрЃЉрЃў рЃўрЃЉрЃћрЃГрЃЊрЃћрЃЉрЃљ toString -рЃўрЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃўрЃЌ
    println(point1.toString())
    println(point2.toString())
    println(point3.toString())

    //equals(==) -рЃўрЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃўрЃЌ рЃерЃћрЃњрЃЋрЃўрЃФрЃџрЃўрЃљ рЃерЃћрЃЋрЃљрЃЊрЃљрЃарЃЮрЃЌ 2 Point рЃЎрЃџрЃљрЃАрЃўрЃА рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў
    println("______")
    println(point1.equals(point2))
    println(point2 == point3)

    /*
    рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ moveSymmetrically -рЃА рЃБрЃюрЃЊрЃљ рЃњрЃљрЃЊрЃљрЃАрЃфрЃћрЃЌ x,y рЃљрЃю o
    x - рЃљрЃЉрЃфрЃўрЃАрЃљрЃЌрЃљ рЃдрЃћрЃарЃФрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ
    y - рЃЮрЃарЃЊрЃўрЃюрЃљрЃбрЃЌрЃљ рЃдрЃћрЃарЃФрЃў рЃЏрЃўрЃЏрЃљрЃарЃЌ
    o - рЃАрЃљрЃЌрЃљрЃЋрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ
    */

    //рЃАрЃўрЃЏрЃћрЃбрЃарЃўрЃБрЃџрЃљрЃЊ рЃњрЃљрЃЊрЃљрЃњрЃЋрЃљрЃЦрЃЋрЃА рЃгрЃћрЃарЃбрЃўрЃџрЃћрЃЉрЃў
    //рЃЌрЃБ axis рЃљрЃа рЃљрЃарЃўрЃА рЃљрЃарЃф x рЃЊрЃљ рЃљрЃарЃф y рЃЏрЃљрЃерЃўрЃю рЃцрЃБрЃюрЃЦрЃфрЃўрЃљрЃА рЃгрЃћрЃарЃбрЃўрЃџрЃў рЃњрЃљрЃЊрЃљрЃљрЃЦрЃЋрЃА рЃАрЃљрЃЌрЃљрЃЋрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ рЃАрЃўрЃЏрЃћрЃбрЃарЃўрЃБрЃџрЃљрЃЊ
    println("______")
    point1.moveSymmetrically("O")
    point2.moveSymmetrically("X")
    point3.moveSymmetrically("Y")

    //рЃгрЃћрЃарЃбрЃўрЃџрЃћрЃЉрЃў рЃАрЃўрЃЏрЃћрЃбрЃарЃўрЃБрЃџрЃљрЃЊ рЃњрЃљрЃЊрЃљрЃбрЃљрЃюрЃўрЃА рЃерЃЏрЃЊрЃћрЃњ
    println(point1.toString())
    println(point2.toString())
    println(point3.toString())

    // calculateDistance рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃњрЃљрЃЏрЃЮрЃЌрЃЋрЃџрЃўрЃА рЃЊрЃљ рЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃЮрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃА рЃерЃЮрЃарЃўрЃА рЃЏрЃљрЃюрЃФрЃўрЃџрЃА
    println("______")
    println("Distance: " + point1.calculateDistance(point2))

    //рЃЏрЃћрЃЮрЃарЃћ рЃЊрЃљрЃЋрЃљрЃџрЃћрЃЉрЃљ Main2 рЃцрЃљрЃўрЃџрЃерЃўрЃљ!

}


class Point(x : Double , y : Double ) {

    //рЃгрЃћрЃарЃбрЃўрЃџрЃўрЃА рЃЎрЃЮрЃЮрЃарЃЊрЃўрЃюрЃљрЃбрЃћрЃЉрЃў
    private var xCoordinate : Double = x
    private var yCoordinate : Double = y

    override fun toString(): String {
        return "Coordinates: X($xCoordinate) Y($yCoordinate)"
    }

    override fun equals(other: Any?): Boolean {
        if (other is Point && other.xCoordinate == xCoordinate && other.yCoordinate == yCoordinate){
            return true
        }
        return false
    }

    //рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃгрЃћрЃарЃбрЃўрЃџрЃўрЃА рЃАрЃўрЃЏрЃћрЃбрЃарЃўрЃБрЃџрЃў рЃњрЃљрЃЊрЃљрЃљрЃЊрЃњрЃўрЃџрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА
    fun moveSymmetrically(axis: String){
        //рЃЌрЃБ axis рЃљрЃа рЃљрЃарЃўрЃА рЃљрЃарЃф x рЃЊрЃљ рЃљрЃарЃф y рЃцрЃБрЃюрЃЦрЃфрЃўрЃљрЃА рЃгрЃћрЃарЃбрЃўрЃџрЃў рЃњрЃљрЃЊрЃљрЃљрЃЦрЃЋрЃА рЃАрЃљрЃЌрЃљрЃЋрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ рЃАрЃўрЃЏрЃћрЃбрЃарЃўрЃБрЃџрЃљрЃЊ
        when (axis) {
            "X" -> {
                // x рЃдрЃћрЃарЃФрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ y рЃўрЃфрЃЋрЃџрЃўрЃА рЃюрЃўрЃерЃљрЃюрЃА
                yCoordinate *= -1
            }
            "Y" -> {
                // y рЃдрЃћрЃарЃФрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ x рЃўрЃфрЃЋрЃџрЃўрЃА рЃюрЃўрЃерЃљрЃюрЃА
                xCoordinate *= -1
            }
            else -> {
                // o рЃАрЃљрЃЌрЃЋрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌ x рЃЊрЃљ y рЃўрЃфрЃЋрЃџрЃўрЃА рЃюрЃўрЃерЃюрЃћрЃЉрЃА
                xCoordinate *= -1
                yCoordinate *= -1
            }
        }
    }

    //рЃгрЃћрЃарЃбрЃўрЃџрЃћрЃЉрЃА рЃерЃЮрЃарЃўрЃА рЃЏрЃљрЃюрЃФрЃўрЃџрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЌрЃЋрЃџрЃћрЃџрЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
    fun calculateDistance(p: Point): Double {
        // distance = Рѕџ( (x2 РђЊ x1)┬▓ + (y2 РђЊ y1)┬▓ ) -рЃцрЃЮрЃарЃЏрЃБрЃџрЃўрЃЌ рЃЋрЃўрЃЌрЃЋрЃџрЃўрЃЌ рЃЊрЃўрЃАрЃбрЃљрЃюрЃфрЃўрЃљрЃА рЃЊрЃљ рЃЋрЃљрЃЏрЃарЃњрЃЋрЃљрЃџрЃћрЃЉрЃЌ рЃЏрЃћрЃљрЃЌрЃћрЃЊрЃќрЃћ
        return (sqrt(((p.xCoordinate - xCoordinate).pow(2.0)) + (p.yCoordinate - yCoordinate).pow(2.0)) * 10.0).roundToInt() / 10.00
    }

    //рЃарЃЮрЃЊрЃћрЃАрЃљрЃф equal -рЃА рЃЋрЃљрЃЮрЃБрЃЋрЃћрЃарЃарЃљрЃўрЃЊрЃћрЃЉрЃЌ рЃ░рЃћрЃерЃЎрЃЮрЃЊрЃўрЃА рЃЮрЃБрЃЋрЃћрЃарЃљрЃўрЃЊрЃўрЃф рЃАрЃљрЃГрЃўрЃарЃЮрЃљ
    override fun hashCode(): Int {
        var result = xCoordinate.hashCode()
        result = 31 * result + yCoordinate.hashCode()
        return result
    }
}

//рЃЏрЃћрЃЮрЃарЃћ рЃЊрЃљрЃЋрЃљрЃџрЃћрЃЉрЃљ Main2 рЃцрЃљрЃўрЃџрЃерЃўрЃљ!

